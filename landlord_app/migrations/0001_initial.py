# Generated by Django 3.1.1 on 2020-11-19 02:49

import datetime
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Evict_Notice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notice_type', models.CharField(max_length=40)),
                ('date_sent', models.DateField()),
                ('delivery_method', models.CharField(max_length=40)),
            ],
        ),
        migrations.CreateModel(
            name='Lease',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rent_amount', models.DecimalField(decimal_places=2, max_digits=9)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('date_signed', models.DateField()),
                ('electric_ind', models.BooleanField()),
                ('water_ind', models.BooleanField()),
                ('garbage_ind', models.BooleanField()),
                ('petfee_amt', models.DecimalField(decimal_places=2, max_digits=9)),
                ('petfee_type', models.CharField(max_length=1)),
                ('othfee_name', models.CharField(max_length=40)),
                ('othfee_amt', models.DecimalField(decimal_places=2, max_digits=9)),
                ('rollover', models.CharField(max_length=1)),
            ],
        ),
        migrations.CreateModel(
            name='Tenant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tenant_first', models.CharField(max_length=40)),
                ('tenant_last', models.CharField(max_length=40)),
                ('tenant_email', models.EmailField(max_length=254)),
                ('tenant_start', models.DateField(default=datetime.date.today)),
                ('tenant_end', models.DateField(default=datetime.date.today)),
                ('evict_notices', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='landlord_app.evict_notice')),
                ('lease', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='landlord_app.lease')),
            ],
        ),
        migrations.CreateModel(
            name='Tenant_Payment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('payer_first', models.CharField(max_length=40)),
                ('payer_last', models.CharField(max_length=40)),
                ('payer_company', models.CharField(max_length=80)),
                ('payer_bizind', models.BooleanField()),
                ('payer_email', models.EmailField(max_length=254)),
                ('pay_method', models.CharField(max_length=20)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=9)),
                ('date_paid', models.DateField()),
                ('reason', models.CharField(max_length=40)),
                ('rtn_number', models.PositiveIntegerField()),
                ('acct_number', models.PositiveIntegerField()),
                ('acct_type', models.CharField(max_length=1)),
                ('check_num', models.PositiveIntegerField()),
                ('cc_num', models.PositiveIntegerField()),
                ('cc_exp_month', models.PositiveIntegerField()),
                ('cc_exp_year', models.PositiveIntegerField()),
                ('cc_vercode', models.PositiveIntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Unit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nickname', models.CharField(max_length=40)),
                ('address_line1', models.CharField(max_length=120)),
                ('address_line2', models.CharField(max_length=120)),
                ('city', models.CharField(max_length=40)),
                ('state', models.CharField(max_length=20)),
                ('zipcode', models.PositiveIntegerField()),
                ('tenants', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='landlord_app.tenant')),
            ],
        ),
        migrations.AddField(
            model_name='tenant',
            name='tenant_payments',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='landlord_app.tenant_payment'),
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('address_line1', models.CharField(max_length=120)),
                ('address_line2', models.CharField(blank=True, max_length=120)),
                ('city', models.CharField(max_length=40)),
                ('state', models.CharField(max_length=20)),
                ('zipcode', models.PositiveIntegerField()),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('units', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='landlord_app.unit')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
